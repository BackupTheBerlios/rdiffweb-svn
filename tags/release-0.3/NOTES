ARCHIVED DESIGN NOTES:

Thoughts:
   * Multiple users
      * Each user has "data root"
      * Each user can have multiple repositories
   * Two levels of user data backends
      * Config file based (default)
         * One user, multiple repositories
            * username/password/repositories in config file
               * username=bill
               * password=frank
               * repositories=/path1|/path/number2|/etc
      * One based on mysql and linux system accounts
         * Multiple users, multiple repositories
            * usernames/passwords/repositores in mysql database
   * Admin page?
      * Only for mysql/system account backend
      * Options to add/delete users, modify passwords, send bills, etc

***************** Modules/plugins *********************
User Authentication
   * Validates username/password

User Data
   * Gives back user root, repo paths
   * Can optionally add/delete/edit repo paths

***************** Web entry points *********************
Main page
   * checks authentication
   * mungers path
   * HTML-izes cherrypy.session['repoPaths']

Browse page
   * checks authentication data
   * mungers path
   * takes relative repo subpath via query string
   * calls getDirEntries for repoPath+repoSubPath, and transforms each entry into HTML (via separate object?)

History page
   * checks authentication data
   * mungers path
   * gets backup history from getBackupHistory, and transforms into HTML

Authentication:
   * Checks cherrypy.session.get('authenticated', False)
   * If not authenticated, displays login page
   * Login page receives post-data, checks authentication module
      * If username/password are correct
         * Sets cherrypy.session['authenticated'] = True
         * Querys userData module for user root, sets cherrypy.session['userRoot']
         * Querys userData module for repository paths, sets cherrypy.session['repoPaths']


*********************** librdiff interfaced objects ****************************
dirEntry:
   * Includes name, isDir, fileSize, exists, and dict (changeDates) of sorted local dates when backed up

backupHistoryEntry:
   * Includes date, size (in bytes), and errors

*********************** librdiff interfaced functions ****************************
getDirEntries(repoRoot, dirPath) -- returns dictionary of entry objects
restoreEntry(repoRoot, dirPath, entry, restoreDate, outputFolderOrFile) -- applies reverse diffs to get entry as it looked on restoreDate.  returns error if failed
getBackupHistory(repoRoot) -- returns dictionary of backupEvent objects

