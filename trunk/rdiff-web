#!/usr/bin/python

import cherrypy
import getopt
import os
import rdiffWeb.rdw_config
import sys
import rdiffWeb.rdw_spider_repos
import threading
import rdiffWeb.page_error

if __name__ == "__main__":
   
   # Initialize config options for static files, so that if we error out, then we can at least display a basic web page.
   cherrypy.config.update({
      '/static' : {
         'staticFilter.on' : True,
         'staticFilter.root': rdiffWeb.rdw_helpers.getStaticRootPath(),
         'staticFilter.dir': "static",
         'rdwAuthenticateFilter.on' : False
      }
   })
   
   # First make sure we have a valid config file.  If not, tell the user to run the config script
   if not rdiffWeb.rdw_config.getConfigFile():
      if os.getuid() != 0:
         error = "<h2>Error: rdiffWeb must be run as root.</h2>"
      else:
         error =  "<h2>Error: rdiffWeb has been installed, but no configuration file exists.<br/>Please run 'rdiff-web-config' to configure settings, then restart rdiffWeb.</h2>"
      cherrypy.root = rdiffWeb.page_error.rdiffErrorPage(error)
      cherrypy.server.start()
      sys.exit(2)


   # Parse command line options
   verbose = True
   debug = False
   pidFile = ""
   logFile = ""

   opts, extraparams = getopt.getopt(sys.argv[1:], 'vd', ['debug', 'log-file=', 'pid-file=', 'background'])
   for option,value in opts:
      if option in ['-d','--debug']:
         debug = True
      elif option in ['--log-file']:
         logFile = value
      elif option in ['--pid-file']:
         pidFile = value
      elif option in ['--background']:
         import rdiffWeb.rdw_helpers
         rdiffWeb.rdw_helpers.daemonize()
         verbose = False

   # Wait to write out to the pidfile until after we've (possibly) been daemonized
   if pidFile:
      # Write our process id to specified file, so we can be killed later
      open(pidFile, 'a').write(str(os.getpid())+"\n")
      
   # We import the rdiffWeb modules now instead of at the top of the file because it needs to access
   # the config file, and the config file may not exist
   import rdiffWeb.page_admin
   import rdiffWeb.page_browse
   import rdiffWeb.page_history
   import rdiffWeb.page_locations
   import rdiffWeb.page_restore
   import rdiffWeb.page_status
   import rdiffWeb.page_prefs

   # OK, we're good to go.  Start the server.
   server = rdiffWeb.page_locations.rdiffLocationsPage()

   serverPort = 8080
   if rdiffWeb.rdw_config.getConfigSetting("ServerPort") != "":
      serverPort = int(rdiffWeb.rdw_config.getConfigSetting("ServerPort"))
   settings = {
      'sessionFilter.on' : True,
      'gzipFilter.on': True,
      'encodingFilter.on' : True,
      'server.socketHost' : rdiffWeb.rdw_config.getConfigSetting("ServerName"),
      'server.socketPort' : serverPort,
      'server.logFile' : logFile,
      '/': {
         'rdwAuthenticateFilter.on' : True,
         'rdwAuthenticateFilter.checkLoginAndPassword' : server.checkAuthentication
      },
      '/status/feed': {
         'rdwAuthenticateFilter.method' : 'HTTP Header'
      }
   }
   if not debug:
      settings['server.environment'] = "production"

   if not verbose:
      settings['server.logToScreen'] = False

   if rdiffWeb.rdw_config.getConfigSetting("SessionStorage").lower() == "disk":
      sessionDir = rdiffWeb.rdw_config.getConfigSetting("SessionDir")
      if os.path.exists(sessionDir) and os.path.isdir(sessionDir) and os.access(sessionDir, os.W_OK):
         cherrypy.log("Setting session mode to disk in directory %s" % sessionDir)
         settings['sessionFilter'] = True
         settings['sessionFilter.storageType'] = 'File'
         settings['sessionFilter.storagePath'] = sessionDir

   cherrypy.config.update(settings)
   cherrypy.root = rdiffWeb.page_locations.rdiffLocationsPage()
   cherrypy.root.browse = rdiffWeb.page_browse.rdiffBrowsePage()
   cherrypy.root.restore = rdiffWeb.page_restore.rdiffRestorePage()
   cherrypy.root.history = rdiffWeb.page_history.rdiffHistoryPage()
   cherrypy.root.status = rdiffWeb.page_status.rdiffStatusPage()
   cherrypy.root.admin = rdiffWeb.page_admin.rdiffAdminPage()
   cherrypy.root.prefs = rdiffWeb.page_prefs.rdiffPreferencesPage()
   
   # Start repo spider thread
   killEvent = threading.Event()

   rdiffWeb.rdw_spider_repos.startRepoSpiderThread(killEvent)
   cherrypy.server.on_stop_server_list.append(lambda: killEvent.set())
   
   cherrypy.server.start()
